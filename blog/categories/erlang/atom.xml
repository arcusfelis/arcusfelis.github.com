<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Erlang | arcusfelis.github.com]]></title>
  <link href="http://arcusfelis.github.com/blog/categories/erlang/atom.xml" rel="self"/>
  <link href="http://arcusfelis.github.com/"/>
  <updated>2012-12-14T14:40:58+04:00</updated>
  <id>http://arcusfelis.github.com/</id>
  <author>
    <name><![CDATA[Uvarov Michael]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ODBC, MS SQL Server and Erlang]]></title>
    <link href="http://arcusfelis.github.com/blog/2012/07/02/odbc-sql/"/>
    <updated>2012-07-02T19:12:00+04:00</updated>
    <id>http://arcusfelis.github.com/blog/2012/07/02/odbc-sql</id>
    <content type="html"><![CDATA[<h2>Date and time</h2>

<p><code>
odbc:sql_query(S, "SELECT  {fn CURDATE()}").
{selected,[[]],[{"2012-10-02"}]}
</code></p>

<p><code>
odbc:sql_query(S, "SELECT  getdate()").
{selected,[[]],[{ { {2012,10,23},{2,6,37} } }]}
</code></p>

<p><code>{ {2012,10,23},{2,6,37} }</code> has a type <code>sql_datetime</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install ODBC and MS SQL Server client for Erlang]]></title>
    <link href="http://arcusfelis.github.com/blog/2012/07/02/odbc/"/>
    <updated>2012-07-02T19:12:00+04:00</updated>
    <id>http://arcusfelis.github.com/blog/2012/07/02/odbc</id>
    <content type="html"><![CDATA[<p>Here we are connecting to MS SQL Server 2008 on MS Windows XP from Erlang on Debian Linux.</p>

<h2>Part 1</h2>

<p>Install utilities (FreeTDS SQL client):</p>

<p>```</p>

<h1>apt-get freetds-bin freetds-dev</h1>

<p>```</p>

<p>Try to connect with the <code>tsql</code> command from the <code>freetds-bin</code> package:</p>

<p><code>
tsql -H %ip_address_or_hostname% -p %port_number% -U %username% -P %password%
</code></p>

<p>or (with actual values for me):</p>

<p>```
$ tsql -H PI -p 1433 -U test -P test
locale is "en_US.UTF-8"
locale charset is "UTF-8"
using default charset "UTF-8"
1></p>

<p>```</p>

<p>If you see the counter (1, 2, 3, ...), most likely tsql is unable to connect to
the indicated server. Check the firewall's settings.</p>

<p><code>sqsh</code> is an alternative for <code>tsql</code> (more powerful).</p>

<h2>Part 2</h2>

<p>Install the ODBC client driver.</p>

<p><code>
apt-get install tdsodbc
</code></p>

<h2>Problems? Part 2a</h2>

<p><code>tdsodbc</code> uses <code>unixodbc</code> library, that conflicts with <code>libiodbc2</code>. <code>libiodbc2</code>
is a dependency for soprano, that is a dependency for the most of KDE applications.</p>

<p>So, you cannot use the KDE and UnixODBC in Debian (the bug from 2011 year).</p>

<p>This conflict can be fixed, downloading the patched versions of the packages from
here:</p>

<p><code>
http://packages.ubuntu.com/precise/libsoprano4
http://packages.ubuntu.com/precise/i386/soprano-daemon
</code></p>

<p>If you don't use KDE or the bug was fixed, skip this step.</p>

<h2>Part 3</h2>

<p>Update the config files:</p>

<p>/etc/odbc.ini</p>

<p><code>
[odbc-test]
Description = test
Driver = ms-sql
Servername = odbc-test
UID = test
Database = test_db
Port = 1433
</code></p>

<p>/etc/odbcinst.ini</p>

<p><code>
[ms-sql]
Description = TDS connection
Driver = /usr/lib/i386-linux-gnu/odbc/libtdsodbc.so
Setup = /usr/lib/i386-linux-gnu/odbc/libtdsS.so
UsageCount = 1
FileUsage = 1
</code></p>

<p>Test it:</p>

<p><code>
$isql -v odbc-test test test
SQL&gt;
</code></p>

<h2>Part 4</h2>

<p>Try it from Erlang:</p>

<p><code>
1&gt; odbc:start().
ok
2&gt; {ok, S} = odbc:connect("DSN=odbc-test;UID=test;PWD=test", []).
{ok,&lt;0.44.0&gt;}
3&gt; odbc:sql_query(S, "SELECT 1").
{selected,[[]],[{1}]}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dialyzer]]></title>
    <link href="http://arcusfelis.github.com/blog/2012/07/02/dialyzer/"/>
    <updated>2012-07-02T19:12:00+04:00</updated>
    <id>http://arcusfelis.github.com/blog/2012/07/02/dialyzer</id>
    <content type="html"><![CDATA[<p>Dializer is a static analysis tool.
It uses Persistent Lookup Table for storing information.
First of all, we need to build PLT:</p>

<p><code>bash
dialyzer  --build_plt  --apps erts kernel stdlib
</code></p>

<p>It is time for a cup of coffee, because it will take about 20 minutes.
Fortunately, it can be called only once.</p>

<p>The next step is only 3-minutes long, but it will be called regularly.
This command will show the errors:</p>

<p><code>bash
dialyzer -n -nn -pa ../xapian/ebin -pa deps/seqbind/ebin/ -pa
deps/erlando/ebin/ -pa deps/parse_trans/ebin/ --src src/ deps/erlando/src/
deps/poolboy/src/
</code></p>

<p>The parameters are:</p>

<ul>
<li><code>-n</code>  Skip the plt check when running Dialyzer. Useful when working with
installed plts that never change.</li>
</ul>


<p>It saves few seconds.</p>

<ul>
<li><code>-nn</code>  Bypass the native code compilation of some key files that Dialyzer
heuristically performs when dialyzing many files; this avoids the
compilation time but it may result in (much) longer analysis time.</li>
</ul>


<p>The native code compilation is slow. So, add this parameter to save time.</p>

<ul>
<li><p><code>-pa</code>  This parameter adds the code for parse transforms.</p></li>
<li><p><code>--src</code>  Add the source code and few dependencies  to analyze.</p></li>
</ul>


<p>The errors in dependencies will be also shown.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pipes]]></title>
    <link href="http://arcusfelis.github.com/blog/2012/06/15/pipes/"/>
    <updated>2012-06-15T18:23:00+04:00</updated>
    <id>http://arcusfelis.github.com/blog/2012/06/15/pipes</id>
    <content type="html"><![CDATA[<h1>Using Xapian through a pipe</h1>

<p>To avoid linking with Xapian you can use a port:</p>

<p><code>erlang
xapian_server:open(Path, [port]).
</code></p>

<p>C-port allows to use Erlang VM and Xapian in different memory spaces.
If a port crashes, Erlang VM will be still alive.</p>

<p>But I think, it does not help to avoid GPL restrictions:
the whole program will be a derivative work.</p>

<p>GPL is a sly license. :)</p>
]]></content>
  </entry>
  
</feed>
